{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template vpc_single_instance_in_subnet.template: Sample template showing how to create a VPC and add an EC2 instance with an Elastic IP address and a security group. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "IPsecpassword":{
            "Type": "String",
            "Default": "123456"
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "AMI": "ami-0b0af3577fe5e3532"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.16.0.0/16",
                "Tags": [
                    {
                        "Key": "VPNserver1",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.16.0.0/24",
                "Tags": [
                    {
                        "Key": "VPNServer1",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "VPNServer1",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "VPNServer1",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
          "WebServerinterface" : {
          "Type" : "AWS::EC2::NetworkInterface",
         "Properties" : {
         "Tags": [
                    {
                        "Key": "VPNServer",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
         "Description": "A nice description.",
         "GroupSet" : [ { "Ref" : "InstanceSecurityGroup" } ],
         "SourceDestCheck": "false",
         "SubnetId": {
                    "Ref": "Subnet"
                }
         }
         },
        "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "VPNServer1",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "OutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "SubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "IPAddress": {
            "Type": "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "VPC"
                }
        },
        "IPAssoc" : {
          "Type" : "AWS::EC2::EIPAssociation",
          "Properties" : {
            "NetworkInterfaceId" : { "Ref" : "WebServerinterface" },
            "AllocationId" : { "Fn::GetAtt" : ["IPAddress", "AllocationId"] }
      }
    },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Enable SSH access via port 22",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "ALL",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "10.17.0.0/16"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {"IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                        }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "All",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0b0af3577fe5e3532",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [ { 
                    "NetworkInterfaceId" : 
                       {"Ref" : "WebServerinterface" },
                      "DeviceIndex" : "0"
                       }],
                "Tags": [
                    {
                        "Key": "VPNserver1",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": 
                    {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install libreswan -y \n",
                                "yum install NetworkManager -y \n",
                                "yum install httpd -y \n",
                                "privateip=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) \n",
                                "publicip= $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4) \n",
                                "echo $publicip > /var/log/publicup.txt \n",
                                "echo -e 'conn vpca-to-vpcb \n\ttype=tunnel \n\tauthby=secret' >/etc/ipsec.d/vpc-to-vpc.conf\n",
                                 {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo -e \"\t","left=","$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)","\">>/etc/ipsec.d/vpc-to-vpc.conf \n"
                                        ]
                                    ]
                                },
                                 {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo -e \"\t","leftid=","$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)","\">>/etc/ipsec.d/vpc-to-vpc.conf \n"
                                        ]
                                    ]
                                },
                                "echo -e '\tleftsubnet=10.16.0.0/16 ' >>/etc/ipsec.d/vpc-to-vpc.conf \n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"\t","right=",
                                            {
                                                "Ref": "IPAddress2"
                                            },
                                            "\">>/etc/ipsec.d/vpc-to-vpc.conf \n"
                                        ]
                                    ]
                                },
                                "echo -e '\trightsubnet=10.17.0.0/16' >>/etc/ipsec.d/vpc-to-vpc.conf \n",
                                "echo -e '\tpfs=yes \n\tauto=start' >>/etc/ipsec.d/vpc-to-vpc.conf \n",
                                {
                                    "Fn::Join" :[
                                        "",["echo -e \"$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)", "\t" ,{ "Ref" : "IPAddress2" }, ": PSK " , "\t", {"Ref": "IPsecpassword"}, "\"> /etc/ipsec.d/vpc-to-vpc.secrets \n"]
                                        ]
                                },
                                "echo -e 'net.ipv4.ip_forward = 1 \nnet.ipv4.conf.all.accept_redirects = 0 \nnet.ipv4.conf.default.accept_redirects = 0 \nnet.ipv4.conf.all.send_redirects = 0 \nnet.ipv4.conf.default.send_redirects = 0 \nnet.ipv4.conf.all.rp_filter = 0 \nnet.ipv4.conf.default.rp_filter = 0 \nnet.ipv4.conf.eth0.rp_filter = 0' >> /etc/sysctl.conf \n",
                                "sudo sysctl -p \n",
                                "sudo systemctl restart NetworkManager \n",
                                "sudo systemctl restart ipsec \n",
                                "sudo systemctl eanble ipsec \n",
                                "sudo systemctl restart httpd \n",
                                "sleep 100",
                                {
                                    "Fn::Join" :[
                                        "",["echo -e \"$(ipsec status)", "\n\t ipsec is running","\"> /var/www/html/ipsec.html \n"]
                                        ]
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "VPC2": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.17.0.0/16",
                "Tags": [
                    {
                        "Key": "VPNserver2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Subnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC2"
                },
                "CidrBlock": "10.17.0.0/24",
                "Tags": [
                    {
                        "Key": "VPNServer2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InternetGateway2": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "VPNServer2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "AttachGateway2": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC2"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway2"
                }
            }
        },
        "RouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC2"
                },
                "Tags": [
                    {
                        "Key": "VPNServer2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Route2": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway2",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway2"
                }
            }
        },
         "WebServer2interface" : {
          "Type" : "AWS::EC2::NetworkInterface",
         "Properties" : {
         "Tags": [
                    {
                        "Key": "VPNServer2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
         "Description": "A nice description.",
         "GroupSet" : [ { "Ref" : "InstanceSecurityGroup2" } ],
         "SourceDestCheck": "false",
         "SubnetId": {
                    "Ref": "Subnet2"
                }
         }
         },
        "SubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet2"
                },
                "RouteTableId": {
                    "Ref": "RouteTable2"
                }
            }
        },
        "NetworkAcl2": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC2"
                },
                "Tags": [
                    {
                        "Key": "VPNServer2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InboundResponsePortsNetworkAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl2"
                },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "OutBoundResponsePortsNetworkAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl2"
                },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "SubnetNetworkAclAssociation2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl2"
                }
            }
        },
          "IPAddress2": {
            "Type": "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "VPC2"
                }
        },
        "IPAssoc2" : {
          "Type" : "AWS::EC2::EIPAssociation",
          "Properties" : {
            "NetworkInterfaceId" : { "Ref" : "WebServer2interface" },
            "AllocationId" : { "Fn::GetAtt" : ["IPAddress2", "AllocationId"] }
      }
    },
        "InstanceSecurityGroup2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC2"
                },
                "GroupDescription": "Enable SSH access via port 22",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "10.16.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebServerInstance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0b0af3577fe5e3532",
                "NetworkInterfaces" : [ { 
                    "NetworkInterfaceId" : 
                       {"Ref" : "WebServer2interface" },
                      "DeviceIndex" : "0"
                       }],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "Tags": [
                    {
                        "Key": "VPNserver2",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install libreswan -y \n",
                                "yum install NetworkManager -y \n",
                                "privateip=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) \n",
                                "publicip= $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4) \n",
                                "echo $publicip > /var/log/publicup.txt \n",
                                "echo -e 'conn vpca-to-vpcb \n\ttype=tunnel \n\tauthby=secret' >/etc/ipsec.d/vpc-to-vpc.conf\n",
                                 {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo -e \"\t","left=","$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)","\">>/etc/ipsec.d/vpc-to-vpc.conf \n"
                                        ]
                                    ]
                                },
                                 {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo -e \"\t","leftid=","$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)","\">>/etc/ipsec.d/vpc-to-vpc.conf \n"
                                        ]
                                    ]
                                },
                                "echo -e '\tleftsubnet=10.17.0.0/16 ' >>/etc/ipsec.d/vpc-to-vpc.conf \n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"\t","right=",
                                            {
                                                "Ref": "IPAddress"
                                            },
                                            "\">>/etc/ipsec.d/vpc-to-vpc.conf \n"
                                        ]
                                    ]
                                },
                                "echo -e '\trightsubnet=10.16.0.0/16' >>/etc/ipsec.d/vpc-to-vpc.conf \n",
                                "echo -e '\tpfs=yes \n\tauto=start' >>/etc/ipsec.d/vpc-to-vpc.conf \n",
                                {
                                    "Fn::Join" :[
                                        "",["echo -e \"$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)", "\t" ,{ "Ref" : "IPAddress" }, ": PSK " ,"\t", {"Ref": "IPsecpassword"}, "\"> /etc/ipsec.d/vpc-to-vpc.secrets \n"]
                                        ]
                                },
                                "echo -e 'net.ipv4.ip_forward = 1 \nnet.ipv4.conf.all.accept_redirects = 0 \nnet.ipv4.conf.default.accept_redirects = 0 \nnet.ipv4.conf.all.send_redirects = 0 \nnet.ipv4.conf.default.send_redirects = 0 \nnet.ipv4.conf.all.rp_filter = 0 \nnet.ipv4.conf.default.rp_filter = 0 \nnet.ipv4.conf.eth0.rp_filter = 0' >> /etc/sysctl.conf \n",
                                "sudo sysctl -p \n",
                                "sudo systemctl restart NetworkManager \n",
                                "sudo systemctl restart ipsec \n",
                                "sudo systemctl enable ipsec \n",
                                "sudo systemctl restart httpd \n",
                                "sleep 300",
                                {
                                    "Fn::Join" :[
                                        "",["echo -e \"$(ipsec status)","\n\t ipsec is running", "\" > /var/www/html/ipsec.html \n"]
                                        ]
                                }
                            ]
                        ]
                    }
                }
            }
        }
        
    },
    "Outputs": {
        "Instance1Id": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "WebServerInstance"
            }
        },
        "Instance1IPAddress": {
            "Description": "IP address of the newly created EC2 instance",
            "Value": {
                "Ref": "IPAddress"
            }
        },
        "server1Ipsecstatus": {
            "Description": "status of ipsec",
            "Value": {
                
                   "Fn::Join" :[
                     "",["http://" , { "Fn::GetAtt": [ "WebServerInstance", "PublicIp"] }]
                       ]
                    }
        },
        "Instance2Id": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "WebServerInstance2"
            }
        },
        "Instance2IPAddress": {
            "Description": "IP address of the newly created EC2 instance",
            "Value": {
                "Ref": "IPAddress2"
            }
        },
        "server2Ipsecstatus": {
            "Description": "status of ipsec",
            "Value": {
                
                   "Fn::Join" :[
                     "",["http://" , { "Fn::GetAtt": [ "WebServerInstance2", "PublicIp"] }]
                       ]
                    }
        }
    }
}
